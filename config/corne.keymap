/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <32 39 40 41 30 31 20 19 18 6 7 8 10 9 21 22 34 33 35 23 11>;
            flavor = "tap-preferred";
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB    &kp Q  &kp W            &kp E                     &kp R         &kp T        &kp Y    &kp U         &kp I                      &kp O             &kp P          &kp BACKSLASH
&kp ESC    &kp A  &hml LEFT_ALT S  &hml LEFT_GUI D           &hml LCTRL F  &kp G        &kp H    &hmr RCTRL J  &hmr RIGHT_GUI K           &hmr RIGHT_ALT L  &kp SEMICOLON  &kp BACKSPACE
&kp LSHFT  &kp Z  &kp X            &kp C                     &kp V         &kp B        &kp N    &kp M         &kp COMMA                  &kp DOT           &kp FSLH       &kp RIGHT_SHIFT
                                   &kp LA(LS(LC(LEFT_GUI)))  &mo 1         &kp SPACE    &kp RET  &mo 2         &kp RA(RS(RC(RIGHT_GUI)))
            >;
        };

        lower {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &kp LESS_THAN    &kp GREATER_THAN        &kp UNDERSCORE       &kp MINUS         &kp PIPE         &kp CARET    &kp LEFT_BRACE               &kp RIGHT_BRACE                   &kp DOLLAR                &kp BACKSLASH      &trans
&kp QUESTION  &kp EXCLAMATION  &hml LEFT_ALT ASTERISK  &hml LEFT_GUI SLASH  &hml LCTRL EQUAL  &kp AMPERSAND    &kp HASH     &hmr RCTRL LEFT_PARENTHESIS  &hmr RIGHT_GUI RIGHT_PARENTHESIS  &hmr RIGHT_ALT SEMICOLON  &kp DOUBLE_QUOTES  &trans
&trans        &kp TILDE        &kp PLUS                &kp LBKT             &kp RBKT          &kp PERCENT      &kp AT_SIGN  &kp COLON                    &kp COMMA                         &kp DOT                   &kp SQT            &trans
                                                       &trans               &trans            &trans           &trans       &trans                       &trans
            >;
        };

        raise {
            bindings = <
&trans  &trans        &trans        &trans        &trans        &trans          &trans        &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
&trans  &trans        &trans        &trans        &trans        &trans          &trans        &trans        &trans        &trans        &trans        &trans
                                    &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };

        bofa {
            bindings = <
&trans      &kp F1        &kp F2        &kp F3        &kp F4        &kp F5              &kp F6                    &kp F7                &kp F8                &kp F9                    &kp F10  &trans
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4        &kp LEFT                  &kp DOWN              &kp UP                &kp RIGHT                 &trans   &trans
&trans      &kp C_PREV    &kp C_NEXT    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PLAY_PAUSE    &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_MAXIMUM  &trans   &trans
                                        &trans        &trans        &trans              &trans                    &trans                &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        both {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
